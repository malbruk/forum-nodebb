{"version":3,"sources":["node_modules/nodebb-plugin-composer-default/static/lib/composer/drafts.js"],"names":["define","topicThumbs","api","drafts","saveThrottleId","init","postContainer","postData","draftIconEl","find","saveThrottle","resetTimeout","setTimeout","saveDraft","on","$","this","toggleClass","window","open","localStorage","getItem","JSON","parse","e","console","warn","length","forEach","save_id","updateVisibility","migrateGuest","migrateThumbs","arguments","clearTimeout","getDraft","getStorage","uid","parseInt","sessionStorage","get","split","storage","draft","text","key","value","handle","trigger","canSave","app","user","titleEl","title","val","raw","hasOwnProperty","endsWith","cid","removeDraft","replace","setItem","attr","tags","keys","Object","filter","startsWith","removeItem","set","add","idx","indexOf","push","splice","stringify","test","migrated","Set","renamed","map","parts","slice","join","newUUID","uuid","put","tid","then","require","composer","updateThumbCount","loadOpen","ajaxify","data","template","login","register","available","saveObj","type","id","newTopic","body","socket","emit","err","topicObj","alertError","message","newReply","undefined","editPost","x","DOMException","code","name"],"mappings":"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","file":"node_modules/nodebb-plugin-composer-default/static/lib/composer/drafts.js","sourcesContent":["'use strict';\r\n\r\n/* globals $, window, socket, app, define, localStorage, sessionStorage, ajaxify */\r\n\r\ndefine('composer/drafts', ['topicThumbs', 'api'], function (topicThumbs, api) {\r\n\tvar drafts = {};\r\n\tvar\tsaveThrottleId;\r\n\r\n\tdrafts.init = function (postContainer, postData) {\r\n\t\tvar draftIconEl = postContainer.find('.draft-icon');\r\n\t\tfunction saveThrottle() {\r\n\t\t\tresetTimeout();\r\n\r\n\t\t\tsaveThrottleId = setTimeout(function () {\r\n\t\t\t\tsaveDraft(postContainer, draftIconEl, postData);\r\n\t\t\t}, 1000);\r\n\t\t}\r\n\r\n\t\tpostContainer.on('keyup', 'textarea, input.handle, input.title', saveThrottle);\r\n\t\tpostContainer.on('click', 'input[type=\"checkbox\"]', saveThrottle);\r\n\t\tpostContainer.on('thumb.uploaded', saveThrottle);\r\n\r\n\t\tdraftIconEl.on('animationend', function () {\r\n\t\t\t$(this).toggleClass('active', false);\r\n\t\t});\r\n\r\n\t\t$(window).on('unload', function () {\r\n\t\t\t// Update visibility on all open composers\r\n\t\t\tvar open = [];\r\n\t\t\ttry {\r\n\t\t\t\topen = localStorage.getItem('drafts:open');\r\n\t\t\t\topen = JSON.parse(open) || [];\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.warn('[composer/drafts] Could not read list of open/available drafts');\r\n\t\t\t\topen = [];\r\n\t\t\t}\r\n\t\t\tif (open.length) {\r\n\t\t\t\topen.forEach(function (save_id) {\r\n\t\t\t\t\tdrafts.updateVisibility('open', save_id);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tdrafts.migrateGuest();\r\n\t\tdrafts.migrateThumbs(...arguments);\r\n\t};\r\n\r\n\tfunction resetTimeout() {\r\n\t\tif (saveThrottleId) {\r\n\t\t\tclearTimeout(saveThrottleId);\r\n\t\t\tsaveThrottleId = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t// deprecated, for removal v1.14.x\r\n\tdrafts.getDraft = function (save_id) {\r\n\t\tconsole.warn('[composer/drafts] drafts.getDraft is deprecated! Use drafts.get() instead.');\r\n\t\treturn localStorage.getItem(save_id);\r\n\t};\r\n\r\n\tfunction getStorage(uid) {\r\n\t\treturn parseInt(uid, 10) > 0 ? localStorage : sessionStorage;\r\n\t}\r\n\r\n\tdrafts.get = function (save_id) {\r\n\t\tvar uid = save_id.split(':')[1];\r\n\t\tvar storage = getStorage(uid);\r\n\t\tvar draft = {\r\n\t\t\ttext: storage.getItem(save_id),\r\n\t\t};\r\n\t\t['cid', 'title', 'tags', 'uuid'].forEach(function (key) {\r\n\t\t\tconst value = storage.getItem(save_id + ':' + key);\r\n\t\t\tif (value) {\r\n\t\t\t\tdraft[key] = value;\r\n\t\t\t}\r\n\t\t});\r\n\t\tif (!parseInt(uid, 10)) {\r\n\t\t\tdraft.handle = storage.getItem(save_id + ':handle');\r\n\t\t}\r\n\r\n\t\t$(window).trigger('action:composer.drafts.get', {\r\n\t\t\tsave_id: save_id,\r\n\t\t\tdraft: draft,\r\n\t\t\tstorage: storage,\r\n\t\t});\r\n\t\treturn draft;\r\n\t};\r\n\r\n\tfunction saveDraft(postContainer, draftIconEl, postData) {\r\n\t\tif (canSave(app.user.uid ? 'localStorage' : 'sessionStorage') && postData && postData.save_id && postContainer.length) {\r\n\t\t\tconst titleEl = postContainer.find('input.title');\r\n\t\t\tconst title = titleEl && titleEl.val();\r\n\t\t\tvar raw = postContainer.find('textarea').val();\r\n\t\t\tvar storage = getStorage(app.user.uid);\r\n\r\n\t\t\tif (postData.hasOwnProperty('cid') && !postData.save_id.endsWith(':cid:' + postData.cid)) {\r\n\t\t\t\t// A new cid was selected, the save_id needs updating\r\n\t\t\t\tdrafts.removeDraft(postData.save_id);\t// First, delete the old draft\r\n\t\t\t\tpostData.save_id = postData.save_id.replace(/cid:\\d+$/, 'cid:' + postData.cid);\t// then create a new save_id\r\n\t\t\t}\r\n\r\n\t\t\tif (raw.length || (title && title.length)) {\r\n\t\t\t\tstorage.setItem(postData.save_id, raw);\r\n\t\t\t\tstorage.setItem(`${postData.save_id}:uuid`, postContainer.attr('data-uuid'));\r\n\r\n\t\t\t\tif (postData.hasOwnProperty('cid')) {\r\n\t\t\t\t\t// New topic only\r\n\t\t\t\t\tconst tags = postContainer.find('input.tags').val();\r\n\t\t\t\t\tstorage.setItem(postData.save_id + ':tags', tags);\r\n\t\t\t\t\tstorage.setItem(postData.save_id + ':title', title);\r\n\t\t\t\t}\r\n\t\t\t\tif (!app.user.uid) {\r\n\t\t\t\t\tvar handle = postContainer.find('input.handle').val();\r\n\t\t\t\t\tstorage.setItem(postData.save_id + ':handle', handle);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$(window).trigger('action:composer.drafts.save', {\r\n\t\t\t\t\tstorage: storage,\r\n\t\t\t\t\tpostData: postData,\r\n\t\t\t\t\tpostContainer: postContainer,\r\n\t\t\t\t});\r\n\t\t\t\tdraftIconEl.toggleClass('active', true);\r\n\t\t\t} else {\r\n\t\t\t\tdrafts.removeDraft(postData.save_id);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tdrafts.removeDraft = function (save_id) {\r\n\t\tif (!save_id) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tresetTimeout();\r\n\t\t// Remove save_id from list of open and available drafts\r\n\t\tdrafts.updateVisibility('available', save_id);\r\n\t\tdrafts.updateVisibility('open', save_id);\r\n\t\tvar uid = save_id.split(':')[1];\r\n\t\tvar storage = getStorage(uid);\r\n\t\tconst keys = Object.keys(storage).filter(key => key.startsWith(save_id));\r\n\t\tkeys.forEach(key => storage.removeItem(key));\r\n\t};\r\n\r\n\tdrafts.updateVisibility = function (set, save_id, add) {\r\n\t\tif (!canSave(app.user.uid ? 'localStorage' : 'sessionStorage') || !save_id) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar open = [];\r\n\t\ttry {\r\n\t\t\topen = localStorage.getItem('drafts:' + set);\r\n\t\t\topen = open ? JSON.parse(open) : [];\r\n\t\t} catch (e) {\r\n\t\t\tconsole.warn('[composer/drafts] Could not read list of open drafts');\r\n\t\t\topen = [];\r\n\t\t}\r\n\t\tvar idx = open.indexOf(save_id);\r\n\r\n\t\tif (add && idx === -1) {\r\n\t\t\topen.push(save_id);\r\n\t\t} else if (!add && idx !== -1) {\r\n\t\t\topen.splice(idx, 1);\r\n\t\t}\t// otherwise do nothing\r\n\r\n\t\tlocalStorage.setItem('drafts:' + set, JSON.stringify(open));\r\n\t};\r\n\r\n\tdrafts.migrateGuest = function () {\r\n\t\t// If any drafts are made while as guest, and user then logs in, assume control of those drafts\r\n\t\tif (canSave('localStorage') && app.user.uid) {\r\n\t\t\tvar test = /^composer:\\d+:\\w+:\\d+(:\\w+)?$/;\r\n\t\t\tvar keys = Object.keys(sessionStorage).filter(function (key) {\r\n\t\t\t\treturn test.test(key);\r\n\t\t\t});\r\n\t\t\tvar migrated = new Set([]);\r\n\t\t\tvar renamed = keys.map(function (key) {\r\n\t\t\t\tvar parts = key.split(':');\r\n\t\t\t\tparts[1] = app.user.uid;\r\n\r\n\t\t\t\tmigrated.add(parts.slice(0, 4).join(':'));\r\n\t\t\t\treturn parts.join(':');\r\n\t\t\t});\r\n\r\n\t\t\tkeys.forEach(function (key, idx) {\r\n\t\t\t\tlocalStorage.setItem(renamed[idx], sessionStorage.getItem(key));\r\n\t\t\t\tsessionStorage.removeItem(key);\r\n\t\t\t});\r\n\r\n\t\t\tmigrated.forEach(function (save_id) {\r\n\t\t\t\tdrafts.updateVisibility('available', save_id, 1);\r\n\t\t\t});\r\n\r\n\t\t\treturn migrated;\r\n\t\t}\r\n\t};\r\n\r\n\tdrafts.migrateThumbs = function (postContainer, postData) {\r\n\t\t// If any thumbs were uploaded, migrate them to this new composer's uuid\r\n\t\tconst newUUID = postContainer.attr('data-uuid');\r\n\t\tconst draft = drafts.get(postData.save_id);\r\n\r\n\t\tif (draft && draft.uuid) {\r\n\t\t\tapi.put(`/topics/${draft.uuid}/thumbs`, {\r\n\t\t\t\ttid: newUUID,\r\n\t\t\t}).then(() => {\r\n\t\t\t\trequire(['composer'], function (composer) {\r\n\t\t\t\t\tcomposer.updateThumbCount(newUUID, postContainer);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\tdrafts.loadOpen = function () {\r\n\t\tif (ajaxify.data.template.login || ajaxify.data.template.register) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// Load drafts if they were open\r\n\t\tvar available;\r\n\t\tvar open = [];\r\n\t\ttry {\r\n\t\t\tavailable = localStorage.getItem('drafts:available');\r\n\t\t\topen = localStorage.getItem('drafts:open');\r\n\t\t\tavailable = JSON.parse(available) || [];\r\n\t\t\topen = JSON.parse(open) || [];\r\n\t\t} catch (e) {\r\n\t\t\tconsole.warn('[composer/drafts] Could not read list of open/available drafts');\r\n\t\t\tavailable = [];\r\n\t\t\topen = [];\r\n\t\t}\r\n\r\n\t\tif (available.length && app.user && app.user.uid !== 0) {\r\n\t\t\t// Deconstruct each save_id and open up composer\r\n\t\t\tavailable.forEach(function (save_id) {\r\n\t\t\t\tif (!save_id) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tvar saveObj = save_id.split(':');\r\n\t\t\t\tvar uid = saveObj[1];\r\n\t\t\t\tvar type = saveObj[2];\r\n\t\t\t\tvar id = saveObj[3];\r\n\t\t\t\tvar draft = drafts.get(save_id);\r\n\r\n\t\t\t\t// If draft is already open, do nothing\r\n\t\t\t\tif (open.indexOf(save_id) !== -1) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Don't open other peoples' drafts\r\n\t\t\t\tif (parseInt(app.user.uid, 10) !== parseInt(uid, 10)) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!draft || (draft.text && draft.title && !draft.text.title && !draft.text.length)) {\r\n\t\t\t\t\t// Empty content, remove from list of open drafts\r\n\t\t\t\t\tdrafts.updateVisibility('available', save_id);\r\n\t\t\t\t\tdrafts.updateVisibility('open', save_id);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\trequire(['composer'], function (composer) {\r\n\t\t\t\t\tif (type === 'cid') {\r\n\t\t\t\t\t\tcomposer.newTopic({\r\n\t\t\t\t\t\t\tcid: id,\r\n\t\t\t\t\t\t\ttitle: draft.title,\r\n\t\t\t\t\t\t\tbody: draft.text,\r\n\t\t\t\t\t\t\ttags: [],\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else if (type === 'tid') {\r\n\t\t\t\t\t\tsocket.emit('topics.getTopic', id, function (err, topicObj) {\r\n\t\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\t\treturn app.alertError(err.message);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcomposer.newReply(id, undefined, topicObj.title, draft.text);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else if (type === 'pid') {\r\n\t\t\t\t\t\tcomposer.editPost(id);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t// Feature detection courtesy of: https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API\r\n\tfunction canSave(type) {\r\n\t\tvar storage;\r\n\t\ttry {\r\n\t\t\tstorage = window[type];\r\n\t\t\tvar x = '__storage_test__';\r\n\t\t\tstorage.setItem(x, x);\r\n\t\t\tstorage.removeItem(x);\r\n\t\t\treturn true;\r\n\t\t} catch (e) {\r\n\t\t\treturn e instanceof DOMException && (\r\n\t\t\t\t// everything except Firefox\r\n\t\t\t\te.code === 22 ||\r\n\t\t\t\t// Firefox\r\n\t\t\t\te.code === 1014 ||\r\n\t\t\t\t// test name field too, because code might not be present\r\n\t\t\t\t// everything except Firefox\r\n\t\t\t\te.name === 'QuotaExceededError' ||\r\n\t\t\t\t// Firefox\r\n\t\t\t\te.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\r\n\t\t\t\t// acknowledge QuotaExceededError only if there's something already stored\r\n\t\t\t\t(storage && storage.length !== 0);\r\n\t\t}\r\n\t}\r\n\r\n\treturn drafts;\r\n});\r\n"]}