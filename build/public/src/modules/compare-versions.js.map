{"version":3,"sources":["node_modules/compare-versions/index.js"],"names":["root","factory","define","amd","exports","module","compareVersions","this","semver","indexOrEnd","str","q","indexOf","length","split","v","c","replace","patchIndex","arr","substring","push","tryParse","isNaN","Number","validate","version","TypeError","test","Error","v1","v2","forEach","s1","s2","i","Math","max","n1","parseInt","n2","sp1","sp2","p1","map","p2","undefined","allowedOperators","operatorResMap",">",">=","=","<=","<","validateOperator","op","join","compare","operator","res"],"mappings":"CACC,SAAUA,EAAMC,GAEf,UAAWC,SAAW,YAAcA,OAAOC,IAAK,CAC9CD,UAAWD,QACN,UAAWG,UAAY,SAAU,CACtCC,OAAOD,QAAUH,QACZ,CACLD,EAAKM,gBAAkBL,MAP3B,CASEM,KAAM,WAEN,IAAIC,EAAS,qIAEb,SAASC,EAAWC,EAAKC,GACvB,OAAOD,EAAIE,QAAQD,MAAQ,EAAID,EAAIG,OAASH,EAAIE,QAAQD,GAG1D,SAASG,EAAMC,GACb,IAAIC,EAAID,EAAEE,QAAQ,KAAM,IAAIA,QAAQ,QAAS,IAC7C,IAAIC,EAAaT,EAAWO,EAAG,KAC/B,IAAIG,EAAMH,EAAEI,UAAU,EAAGF,GAAYJ,MAAM,KAC3CK,EAAIE,KAAKL,EAAEI,UAAUF,EAAa,IAClC,OAAOC,EAGT,SAASG,EAASP,GAChB,OAAOQ,MAAMC,OAAOT,IAAMA,EAAIS,OAAOT,GAGvC,SAASU,EAASC,GAChB,UAAWA,IAAY,SAAU,CAC/B,MAAM,IAAIC,UAAU,oCAEtB,IAAKnB,EAAOoB,KAAKF,GAAU,CACzB,MAAM,IAAIG,MAAM,uCAAwCH,EAAQ,gBAIpE,SAASpB,EAAgBwB,EAAIC,IAC1BD,EAAIC,GAAIC,QAAQP,GAEjB,IAAIQ,EAAKnB,EAAMgB,GACf,IAAII,EAAKpB,EAAMiB,GAEf,IAAK,IAAII,EAAI,EAAGA,EAAIC,KAAKC,IAAIJ,EAAGpB,OAAS,EAAGqB,EAAGrB,OAAS,GAAIsB,IAAK,CAC/D,IAAIG,EAAKC,SAASN,EAAGE,IAAM,EAAG,IAC9B,IAAIK,EAAKD,SAASL,EAAGC,IAAM,EAAG,IAE9B,GAAIG,EAAKE,EAAI,OAAO,EACpB,GAAIA,EAAKF,EAAI,OAAQ,EAGvB,IAAIG,EAAMR,EAAGA,EAAGpB,OAAS,GACzB,IAAI6B,EAAMR,EAAGA,EAAGrB,OAAS,GAEzB,GAAI4B,GAAOC,EAAK,CACd,IAAIC,EAAKF,EAAI3B,MAAM,KAAK8B,IAAItB,GAC5B,IAAIuB,EAAKH,EAAI5B,MAAM,KAAK8B,IAAItB,GAE5B,IAAKa,EAAI,EAAGA,EAAIC,KAAKC,IAAIM,EAAG9B,OAAQgC,EAAGhC,QAASsB,IAAK,CACnD,GAAIQ,EAAGR,KAAOW,kBAAoBD,EAAGV,KAAO,iBAAmBQ,EAAGR,KAAO,SAAU,OAAQ,EAC3F,GAAIU,EAAGV,KAAOW,kBAAoBH,EAAGR,KAAO,iBAAmBU,EAAGV,KAAO,SAAU,OAAO,EAE1F,GAAIQ,EAAGR,GAAKU,EAAGV,GAAI,OAAO,EAC1B,GAAIU,EAAGV,GAAKQ,EAAGR,GAAI,OAAQ,QAExB,GAAIM,GAAOC,EAAK,CACrB,OAAOD,GAAO,EAAI,EAGpB,OAAO,EAGT,IAAIM,GACF,IACA,KACA,IACA,IACA,MAGF,IAAIC,GACFC,KAAM,GACNC,MAAO,EAAG,GACVC,KAAM,GACNC,OAAQ,EAAG,GACXC,MAAO,IAGT,SAASC,EAAiBC,GACxB,UAAWA,IAAO,SAAU,CAC1B,MAAM,IAAI5B,UAAU,yDAA2D4B,GAEjF,GAAIR,EAAiBnC,QAAQ2C,MAAS,EAAG,CACvC,MAAM,IAAI5B,UAAU,qCAAuCoB,EAAiBS,KAAK,OAIrFlD,EAAgBmB,SAAW,SAASC,GAClC,cAAcA,IAAY,UAAYlB,EAAOoB,KAAKF,IAGpDpB,EAAgBmD,QAAU,SAAU3B,EAAIC,EAAI2B,GAE1CJ,EAAiBI,GAIjB,IAAIC,EAAMrD,EAAgBwB,EAAIC,GAC9B,OAAOiB,EAAeU,GAAU9C,QAAQ+C,IAAQ,GAGlD,OAAOrD","file":"node_modules/compare-versions/index.js","sourcesContent":["/* global define */\n(function (root, factory) {\n  /* istanbul ignore next */\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.compareVersions = factory();\n  }\n}(this, function () {\n\n  var semver = /^v?(?:\\d+)(\\.(?:[x*]|\\d+)(\\.(?:[x*]|\\d+)(\\.(?:[x*]|\\d+))?(?:-[\\da-z\\-]+(?:\\.[\\da-z\\-]+)*)?(?:\\+[\\da-z\\-]+(?:\\.[\\da-z\\-]+)*)?)?)?$/i;\n\n  function indexOrEnd(str, q) {\n    return str.indexOf(q) === -1 ? str.length : str.indexOf(q);\n  }\n\n  function split(v) {\n    var c = v.replace(/^v/, '').replace(/\\+.*$/, '');\n    var patchIndex = indexOrEnd(c, '-');\n    var arr = c.substring(0, patchIndex).split('.');\n    arr.push(c.substring(patchIndex + 1));\n    return arr;\n  }\n\n  function tryParse(v) {\n    return isNaN(Number(v)) ? v : Number(v);\n  }\n\n  function validate(version) {\n    if (typeof version !== 'string') {\n      throw new TypeError('Invalid argument expected string');\n    }\n    if (!semver.test(version)) {\n      throw new Error('Invalid argument not valid semver (\\''+version+'\\' received)');\n    }\n  }\n\n  function compareVersions(v1, v2) {\n    [v1, v2].forEach(validate);\n\n    var s1 = split(v1);\n    var s2 = split(v2);\n\n    for (var i = 0; i < Math.max(s1.length - 1, s2.length - 1); i++) {\n      var n1 = parseInt(s1[i] || 0, 10);\n      var n2 = parseInt(s2[i] || 0, 10);\n\n      if (n1 > n2) return 1;\n      if (n2 > n1) return -1;\n    }\n\n    var sp1 = s1[s1.length - 1];\n    var sp2 = s2[s2.length - 1];\n\n    if (sp1 && sp2) {\n      var p1 = sp1.split('.').map(tryParse);\n      var p2 = sp2.split('.').map(tryParse);\n\n      for (i = 0; i < Math.max(p1.length, p2.length); i++) {\n        if (p1[i] === undefined || typeof p2[i] === 'string' && typeof p1[i] === 'number') return -1;\n        if (p2[i] === undefined || typeof p1[i] === 'string' && typeof p2[i] === 'number') return 1;\n\n        if (p1[i] > p2[i]) return 1;\n        if (p2[i] > p1[i]) return -1;\n      }\n    } else if (sp1 || sp2) {\n      return sp1 ? -1 : 1;\n    }\n\n    return 0;\n  };\n\n  var allowedOperators = [\n    '>',\n    '>=',\n    '=',\n    '<',\n    '<='\n  ];\n\n  var operatorResMap = {\n    '>': [1],\n    '>=': [0, 1],\n    '=': [0],\n    '<=': [-1, 0],\n    '<': [-1]\n  };\n\n  function validateOperator(op) {\n    if (typeof op !== 'string') {\n      throw new TypeError('Invalid operator type, expected string but got ' + typeof op);\n    }\n    if (allowedOperators.indexOf(op) === -1) {\n      throw new TypeError('Invalid operator, expected one of ' + allowedOperators.join('|'));\n    }\n  }\n\n  compareVersions.validate = function(version) {\n    return typeof version === 'string' && semver.test(version);\n  }\n\n  compareVersions.compare = function (v1, v2, operator) {\n    // Validate operator\n    validateOperator(operator);\n\n    // since result of compareVersions can only be -1 or 0 or 1\n    // a simple map can be used to replace switch\n    var res = compareVersions(v1, v2);\n    return operatorResMap[operator].indexOf(res) > -1;\n  }\n\n  return compareVersions;\n}));\n"]}